% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/subsetting-utils.R
\docType{methods}
\name{ImageList-subsetting}
\alias{ImageList-subsetting}
\alias{getImages}
\alias{setImages}
\alias{getChannels}
\alias{setChannels}
\alias{mergeChannels}
\alias{getImages,ImageList-method}
\alias{setImages<-,ImageList-method}
\alias{getChannels,ImageList-method}
\alias{setChannels<-,ImageList-method}
\title{General subsetting methods for ImageList objects}
\arguments{
\item{x, y}{\code{ImageList} objects}

\item{i}{integer, logical, character or vector of such indicating which
element(s) to replace or extract}

\item{value}{an \code{ImageList} or \code{\linkS4class{Image}}
object}
}
\value{
An ImageList object
}
\description{
These getter and setter functions are used to extract, replace and merge
entries in an \code{\linkS4class{ImageList}} object.
}
\section{Setting and getting images}{

Functions to extract and replace elements (= images) of an
\linkS4class{ImageList} object. In the following code, \code{x} is an
ImageList object. The parameter \code{i} indicates the
element(s) of \code{x} that should be returned or replaced. Replacement is
done by \code{value}, which takes an ImageList or Image object. If
\code{length(i) > 0}, \code{value} has to be an ImageList object of
\code{length(i)}, otherwise \code{value} allows an ImageList object of length
1 or an Image object.

\describe{
\item{\code{getImages(x, i)}:}{Returns image(s) indicated by \code{i} of
the ImageList object \code{x}}
\item{\code{setImages(x, i) <- value}:}{Replaces the image(s) indicated by
\code{i} of the ImageList object \code{x} with \code{value}. For this,
\code{value} needs to have the same length as \code{i}}
}

These setter and getter functions are the recommended way of extracting and replacing
images in an ImageList object. Alternatively, the standard operations via `[`, `[[`,
`[<-` and `[[<-` can be performed (see \code{?\link{List}} for S4Vectors subsetting
functionality). However, these operations do not change element names during replacment
calls. The \code{setImages()} function makes sure that element names are replaced if
\code{value} is named or of \code{i} is a character or vector of characters.
}

\section{Getting and setting channels}{

Functions to extract and replace channels of an \linkS4class{ImageList}
object. Here, \code{x} is an \linkS4class{ImageList} object. The parameter
\code{i} indicates the channels of \code{x} that should be returned or
replaced. Replacement is done by \code{value}, which takes an ImageList object.
The ImageList object \code{value} needs to have the same length as \code{x}.
Furthermore, the number of channels in \code{value} should be identical to
\code{length(i)}.

\describe{
\item{\code{getChannels(x, i)}:}{Returns channel(s) indicated by \code{i} of
the ImageList object \code{x}}
\item{\code{setChannels(x, i) <- value}:}{Replaces the channel(s) indicated by
\code{i} of the ImageList object \code{x} with \code{value}. For this,
\code{value} needs to have the same length as \code{i} and the same
number of channels as \code{length(i)}.}
}

The \code{setChannels()} setter function does not allow adding new channels to
the ImageList object. For this operation, the \code{mergeChannels} function
was implemented (see below).
}

\section{Merging images}{

Merging images is possible by merging two or more ImageList objects via:

\describe{
\item{\code{c(x,y)}:}{Returns an composite ImageList object with
elements of both ImageList objects \code{x} and \code{y}.
More than two ImageList objects can be merged in that way.}
}
}

\section{Merging channels}{

Merging channels is possible via:

\describe{
\item{\code{mergeChannels(x,y)}:}{Returns an ImageList in which
the channels of the ImageList object \code{y} have been appended
to the channels of the ImageList object \code{x}.
Only channels of two ImageList objects can be merged in that way.}
}
}

\examples{
data("pancreasImages")

# Get images
getImages(pancreasImages, 1)
getImages(pancreasImages, "A02")
getImages(pancreasImages, 1:2)
getImages(pancreasImages, c("A02", "D01"))
getImages(pancreasImages, grepl("A02", names(pancreasImages)))

# Set images
setImages(pancreasImages, 1) <- pancreasImages[1]
setImages(pancreasImages, "F02") <- pancreasImages[1]
setImages(pancreasImages, "F02") <- NULL

# Get channels
getChannels(pancreasImages, 1)
getChannels(pancreasImages, "SMA")
getChannels(pancreasImages, c("SMA", "INS"))

# Set channels
channel1 <- getChannels(pancreasImages, 1)
setChannels(pancreasImages, 1) <- channel1
channelINS <- getChannels(pancreasImages, "INS")
setChannels(pancreasImages, "CD38") <- channelINS
setChannels(pancreasImages, "CD38") <- NULL

# Merge images
c(pancreasImages[c(1,3)], pancreasImages[2])

# Merge channels
channel12 <- getChannels(pancreasImages, c(1,2))
channel34 <- getChannels(pancreasImages, c(3,4))
mergeChannels(channel12, channel34)

}
\author{
Nils Eling \email{nils.eling@dqbm.uzh.ch}
}
